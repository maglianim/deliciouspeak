# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api.models.login_success2fa_resp import LoginSuccess2faResp
from api.models.login_success_resp import LoginSuccessResp
from api import util

from api.models.login_success2fa_resp import LoginSuccess2faResp  # noqa: E501
from api.models.login_success_resp import LoginSuccessResp  # noqa: E501

class AuthLogin200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token=None, message=None):  # noqa: E501
        """AuthLogin200Response - a model defined in OpenAPI

        :param token: The token of this AuthLogin200Response.  # noqa: E501
        :type token: str
        :param message: The message of this AuthLogin200Response.  # noqa: E501
        :type message: str
        """
        self.openapi_types = {
            'token': str,
            'message': str
        }

        self.attribute_map = {
            'token': 'token',
            'message': 'message'
        }

        self._token = token
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'AuthLogin200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The authLogin_200_response of this AuthLogin200Response.  # noqa: E501
        :rtype: AuthLogin200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this AuthLogin200Response.


        :return: The token of this AuthLogin200Response.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthLogin200Response.


        :param token: The token of this AuthLogin200Response.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def message(self):
        """Gets the message of this AuthLogin200Response.


        :return: The message of this AuthLogin200Response.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuthLogin200Response.


        :param message: The message of this AuthLogin200Response.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
