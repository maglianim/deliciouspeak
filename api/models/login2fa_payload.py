# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util


class Login2faPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username=None, otp=None):  # noqa: E501
        """Login2faPayload - a model defined in OpenAPI

        :param username: The username of this Login2faPayload.  # noqa: E501
        :type username: str
        :param otp: The otp of this Login2faPayload.  # noqa: E501
        :type otp: str
        """
        self.openapi_types = {
            'username': str,
            'otp': str
        }

        self.attribute_map = {
            'username': 'username',
            'otp': 'otp'
        }

        self._username = username
        self._otp = otp

    @classmethod
    def from_dict(cls, dikt) -> 'Login2faPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Login2faPayload of this Login2faPayload.  # noqa: E501
        :rtype: Login2faPayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this Login2faPayload.


        :return: The username of this Login2faPayload.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Login2faPayload.


        :param username: The username of this Login2faPayload.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def otp(self):
        """Gets the otp of this Login2faPayload.

        one time password value  # noqa: E501

        :return: The otp of this Login2faPayload.
        :rtype: str
        """
        return self._otp

    @otp.setter
    def otp(self, otp):
        """Sets the otp of this Login2faPayload.

        one time password value  # noqa: E501

        :param otp: The otp of this Login2faPayload.
        :type otp: str
        """
        if otp is None:
            raise ValueError("Invalid value for `otp`, must not be `None`")  # noqa: E501

        self._otp = otp
